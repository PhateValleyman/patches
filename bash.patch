--- a/config-top.h
+++ b/config-top.h
@@ -63,7 +63,7 @@
 /* The default value of the PATH variable. */
 #ifndef DEFAULT_PATH_VALUE
 #define DEFAULT_PATH_VALUE \
-  "/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:."
+  "/data/data/com.termux/files/usr/bin:."
 #endif
 
 /* If you want to unconditionally set a value for PATH in every restricted
@@ -74,7 +74,7 @@
    the Posix.2 confstr () function, or CS_PATH define are not present. */
 #ifndef STANDARD_UTILS_PATH
 #define STANDARD_UTILS_PATH \
-  "/bin:/usr/bin:/sbin:/usr/sbin:/etc:/usr/etc"
+  "/data/data/com.termux/files/usr/bin"
 #endif
 
 /* Default primary and secondary prompt strings. */
@@ -91,7 +91,7 @@
 #define DEFAULT_BASHRC "~/.bashrc"
 
 /* System-wide .bashrc file for interactive shells. */
-/* #define SYS_BASHRC "/etc/bash.bashrc" */
+#define SYS_BASHRC "/data/data/com.termux/files/usr/etc/bash.bashrc"
 
 /* System-wide .bash_logout for login shells. */
 /* #define SYS_BASH_LOGOUT "/etc/bash.bash_logout" */



--- a/error.c
+++ b/error.c
@@ -430,7 +430,7 @@
   static FILE *tracefp = (FILE *)NULL;
 
   if (tracefp == NULL)
-    tracefp = fopen("/tmp/bash-trace.log", "a+");
+    tracefp = fopen("/data/data/com.termux/files/usr/tmp/bash-trace.log", "a+");
 
   if (tracefp == NULL)
     tracefp = stderr;



--- a/examples/loadables/getconf.c
+++ b/examples/loadables/getconf.c
@@ -489,8 +489,10 @@
     { "POSIX2_UPE", _SC_2_UPE, SYSCONF },
     { "POSIX2_VERSION", _SC_2_VERSION, SYSCONF },
 
+#ifdef _CS_PATH
     { "PATH", _CS_PATH, CONFSTR },
     { "CS_PATH", _CS_PATH, CONFSTR },
+#endif
 
     /* LFS */
 #ifdef _CS_LFS_CFLAGS
@@ -1072,6 +1074,7 @@
 	printf ("%ld\n", value);
       return (EXECUTION_SUCCESS);
 
+#ifndef __ANDROID__
     case CONFSTR:
       errno = 0;
       clen = confstr (cn, (char *) NULL, 0);
@@ -1092,10 +1095,14 @@
 	printf ("%.*s\n", (int) clen, cvalue);
       free (cvalue);
       return (EXECUTION_SUCCESS);
+#endif
 
     case CONSTANT:
       return (getconf_internal (c, all));
 
+#ifdef __ANDROID__
+    case CONFSTR:
+#endif
     case UNDEFINED:
       builtin_error ("%s: undefined", c->name);
       return (EXECUTION_FAILURE);



--- a/lib/malloc/stats.c
+++ b/lib/malloc/stats.c
@@ -142,7 +142,7 @@
   _print_malloc_stats (s, fp);
 }
 
-#define TRACEROOT "/var/tmp/maltrace/stats."
+#define TRACEROOT "/data/data/com.termux/files/usr/var/tmp/maltrace/stats."
 
 void
 trace_malloc_stats (s, fn)


--- a/lib/malloc/table.c
+++ b/lib/malloc/table.c
@@ -390,7 +390,7 @@
   _location_dump_table (stderr);
 }
 
-#define LOCROOT "/var/tmp/maltrace/locations."
+#define LOCROOT "/data/data/com.termux/files/usr/var/tmp/maltrace/locations."
 
 void
 mlocation_write_table ()



--- a/lib/malloc/trace.c
+++ b/lib/malloc/trace.c
@@ -108,7 +108,7 @@
 #endif
 }
 
-#define TRACEROOT "/var/tmp/maltrace/trace."
+#define TRACEROOT "/data/data/com.termux/files/usr/var/tmp/maltrace/trace."
 
 void
 malloc_set_tracefn (s, fn)


--- a/lib/readline/complete.c
+++ b/lib/readline/complete.c
@@ -2231,7 +2231,7 @@
 char *
 rl_username_completion_function (const char *text, int state)
 {
-#if defined (__WIN32__) || defined (__OPENNT)
+#if defined (__WIN32__) || defined (__OPENNT) || defined (__ANDROID__)
   return (char *)NULL;
 #else /* !__WIN32__ && !__OPENNT) */
   static char *username = (char *)NULL;


--- a/lib/readline/rlconf.h
+++ b/lib/readline/rlconf.h
@@ -43,7 +43,7 @@
 #define DEFAULT_INPUTRC "~/.inputrc"
 
 /* The ultimate last-ditch filename for an init file -- system-wide. */
-#define SYS_INPUTRC "/etc/inputrc"
+#define SYS_INPUTRC "/data/data/com.termux/files/usr/etc/inputrc"
 
 /* If defined, expand tabs to spaces. */
 #define DISPLAY_TABS



--- a/lib/readline/util.c
+++ b/lib/readline/util.c
@@ -506,7 +506,7 @@
   if (x == 0)
     x = ".";
 #else
-  x = "/var/tmp";
+  x = "/data/data/com.termux/files/usr/var/tmp";
 #endif
   snprintf (fnbuf, sizeof (fnbuf), "%s/rltrace.%ld", x, (long)getpid());
   unlink(fnbuf);



--- a/lib/sh/tmpfile.c
+++ b/lib/sh/tmpfile.c
@@ -74,15 +74,11 @@
     return sys_tmpdir;
 #endif
 
-  sys_tmpdir = "/tmp";
+  sys_tmpdir = "/data/data/com.termux/files/usr/tmp";
   if (file_iswdir (sys_tmpdir))
     return sys_tmpdir;
 
-  sys_tmpdir = "/var/tmp";
-  if (file_iswdir (sys_tmpdir))
-    return sys_tmpdir;
-
-  sys_tmpdir = "/usr/tmp";
+  sys_tmpdir = "/data/data/com.termux/files/usr/var/tmp";
   if (file_iswdir (sys_tmpdir))
     return sys_tmpdir;
 

--- a/pathnames.h.in
+++ b/pathnames.h.in
@@ -22,10 +22,10 @@
 #define _PATHNAMES_H_
 
 /* The default file for hostname completion. */
-#define DEFAULT_HOSTS_FILE "/etc/hosts"
+#define DEFAULT_HOSTS_FILE "/data/data/com.termux/files/usr/etc/hosts"
 
 /* The default login shell startup file. */
-#define SYS_PROFILE "/etc/profile"
+#define SYS_PROFILE "/data/data/com.termux/files/usr/etc/profile"
 
 /* The default location of the bash debugger initialization/startup file. */
 #define DEBUGGER_START_FILE	"@DEBUGGER_START_FILE@"



--- a/shell.c
+++ b/shell.c
@@ -339,12 +339,12 @@
 {
   struct stat sb;
 
-  if (stat ("/tmp", &sb) < 0)
-    internal_warning (_("could not find /tmp, please create!"));
+  if (stat ("/data/data/com.termux/files/usr/tmp", &sb) < 0)
+    internal_warning (_("could not find /data/data/com.termux/files/usr/tmp, please create!"));
   else
     {
       if (S_ISDIR (sb.st_mode) == 0)
-	internal_warning (_("/tmp must be a valid directory name"));
+	internal_warning (_("/data/data/com.termux/files/usr/tmp must be a valid directory name"));
     }
 }
 #endif /* __CYGWIN__ */


--- a/version.c
+++ b/version.c
@@ -83,12 +83,5 @@
 show_shell_version (extended)
      int extended;
 {
-  printf (_("GNU bash, version %s (%s)\n"), shell_version_string (), MACHTYPE);
-  if (extended)
-    {
-      printf ("%s\n", _(bash_copyright));
-      printf ("%s\n", _(bash_license));
-      printf ("%s\n", _("This is free software; you are free to change and redistribute it."));
-      printf ("%s\n", _("There is NO WARRANTY, to the extent permitted by law."));
-    }
+  printf (_("bash v%s (%s)\nby PhateValleyman\nJonas.Ned@outlook.com\n"), shell_version_string (), MACHTYPE);
 }


 
--- a/shell.c
+++ b/shell.c
@@ -1878,7 +1878,9 @@
 	}
       else
 	{
-	  current_user.user_name = _("I have no name!");
+	  current_user.user_name = getenv("USER");
+	  if (!current_user.user_name)
+		  current_user.user_name = _("Valleyman");
 	  current_user.user_name = savestring (current_user.user_name);
 	  current_user.shell = savestring ("/bin/sh");
 	  current_user.home_dir = savestring ("/");
@@ -1919,10 +1921,12 @@
   if (current_host_name == 0)
     {
       /* Initialize current_host_name. */
-      if (gethostname (hostname, 255) < 0)
-	current_host_name = "??host??";
+      if (getenv("HOSTNAME"))
+  current_host_name = savestring (getenv("HOSTNAME"));
+      else if (gethostname (hostname, 255) >= 0)
+  current_host_name = savestring (hostname);
       else
-	current_host_name = savestring (hostname);
+	current_host_name = "umbrella-corporation";
     }
 
   /* Initialize the stuff in current_user that comes from the password
